#This file tells how enqueuer should be executed

#execution mode
#two modes are mutually exclusive 'single-run' and 'daemon'. At least one of them has to be defined
run-mode:
  # single-run mode: executes a single time. This is the one that has to be used when your goal is to integrate your pipeline.
  #             It runs, at the same time, every file (/docs/tests/test.yml) listed in 'files' field or that matches 'file' value.
  #             Once them all are ran, enqueuer ends its execution, compiles a summary and saves it in a file defined in 'reportName'.
  #             At the end of execution, a status code is returned:
  #               0, if everything is ok; or
  #               1, if there is at least one invalid thing.
  # You can use this one as example: /singleRun.yml
  single-run:
    #Used to describe your config test scenario
    name: examples

    #requisition files name or glob
    files:
      - 1.yml
      - 2.yml
      - *.json

    #Optional. A single file with the whole execution report is generated. Every test of every input file will be there.
    reportName: singleRunOutput.yml #outputExamples/singleRunOutput.json

    #Default: false
    #Run every file at the same time
    parallel: false

  ##--------------------------------------

  # daemon mode: it will run indefinitely. Endlessly. As a service.
  #         When running in daemon mode it will be waiting for test values (/docs/tests/test.yml) from those mechanisms inputs listed. One after the other.
  #         Some IPC protocols are currently supported: http-server, tcp and uds. You can find an example of both right below
  # You can use this one as example: /daemonRun.yml
  daemon:
    #Accepts uds requisitions
    - type: uds
      path: /tmp/in.sock #defaults to /tmp/enqueuer.requisitions

    #Accepts tcp requisitions
    - type: tcp
      port: 8081 #defaults to23022


    #Accepts http requisitions
    - type: http-server
      endpoint: /any #defaults to /requisitions
      port: 8080 #defaults to 23023
      method: PUT #defaults to POST

#Optional. Defines how information are logged in the console. Accepted values are: trace; debug; info; warning (default); error; and fatal.
log-level: trace

#Optional. A single file for each input is generated and every test of it will be there.
#Every supported IPC protocol is available here and you can check their values in /docs/tests/publishers folder.
outputs:
  -  type: file
     filenamePrefix: outputExamples/
     filenameExtension: yml #json

#Optional
store:
  #Variables key and their value
  #Below, a 'tcpKey' key is defined with the value 'tcp value'.
  #there are two ways of using it:
  #   Non js code snippet: the easiest one is to type <<tcpKey>> where you want it to be replaced in a test file.
  #   js code snippet: simply store.tcpKey. So, if you type console.log(store.tcpKey) you'll see 'tcp value' being printed out in the console.
  tcpKey: "tcp value"

  #We can have as many definitions as you want to
  otherKey: otherValue
  'separated key': separated value

  #You can even define whole objects here:
  object:
    first: first value
    second:
      nested: thing