#A subscription is an "under demand"event. It means that it is not triggered by enqueuer itself.
#Rather than that, enqueuer waits on an external trigger and asserts on the message that flew through it.
#Every subscription has its own properties. But they all have these properties defined here.
#Variable replacements are available here. (/docs/instructions/variables.yml)

#Optional. Used to describe the subscription scenario
name: subscription scenario

#IPC protocol type. There are several accepted values: amqp, file, http-client, mqtt etc.
#You can check them all in: /docs/tests/subscriptions folder.
type: amqp

#Default: false.
#Identifies that this subscription should not receive any message
#If set and a message is received a failing test will be generated
#On the other hand. If set and no message is received in a given timeout. This subscription is a valid one
avoid: false

#Defaults to 0. Sets in milliseconds how log the subscription has to wait before being considered as invalid.
#Even thought it's an optional value, it's a good practice to define it to avoid endless executions.
timeout: 3000

#Check the list of events here: /docs/instructions/events.yml
#Optional. Event triggered as soon as the subscription is initialized.
onInit:
#Optional. Event triggered when a subscription receives the message it was waiting for
onMessageReceived:
#Optional. Event triggered as soon as the subscription is over
onFinish:
