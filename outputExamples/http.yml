name: examples/http.yml
valid: true
tests: []
startEvent: {}
requisitions:
  -
    valid: true
    tests:
      -
        valid: true
        name: 'No time out'
        description: 'Requisition has not timed out'
    name: 'Requisition #0'
    time:
      totalTime: 214
      startTime: '2018-09-24T14:51:29.286Z'
      endTime: '2018-09-24T14:51:29.500Z'
      timeout: 3000
    subscriptions:
      -
        name: 'subscription description'
        type: http-server
        tests:
          -
            name: '"Basic" authentication prefix'
            valid: true
            description: 'Prefix "Basic" was found.'
          -
            name: '"Basic" authentication user'
            valid: true
            description: 'User found'
          -
            name: '"Basic" authentication password'
            valid: true
            description: 'Password matchs'
          -
            name: '"Basic" authentication'
            valid: true
            description: 'Basic authentication is valid'
          -
            name: Payload
            valid: true
            description: 'Expected ''JSON.parse(message.body).enqueuer'' to be equal to ''virgs''. Received ''virgs'''
          -
            name: Params
            valid: true
            description: 'Expected ''params.firstId'' to be equal to ''idStuff''. Received ''idStuff'''
          -
            name: Query
            valid: true
            description: 'Expected ''query.query'' to be equal to ''0''. Received ''000'''
          -
            valid: true
            name: 'Message received'
            description: 'Subscription has received its message'
        valid: true
        connectionTime: '2018-09-24T14:51:29.357Z'
        messageReceived:
          headers:
            content-type: application/json
            authorization: 'Basic dXNlcjpwYXNzd29yZA=='
            content-length: '25'
            host: 'localhost:23075'
            connection: close
          params:
            firstId: idStuff
          query:
            query: '000'
          body: "{\n  \"enqueuer\": \"virgs\"\n}"
    startEvent:
      publisher:
        name: 'publisher description'
        valid: true
        type: http-client
        tests:
          -
            name: Published
            valid: true
            description: 'Published successfully'
          -
            name: 'Status Code'
            valid: true
            description: 'Expected ''statusCode'' to be equal to ''321''. Received ''321'''
          -
            name: Body
            valid: true
            description: 'Expected ''body'' to be equal to ''dynamically changed payload''. Received ''dynamically changed payload'''
          -
            name: 'Response message received'
            valid: true
            description: 'Response message was received'
        publishTime: '2018-09-24T14:51:29.500Z'
        messageReceived:
          statusCode: 321
          body: 'dynamically changed payload'
          headers:
            x-powered-by: Express
            content-type: 'text/html; charset=utf-8'
            content-length: '27'
            etag: 'W/"1b-e5esTWfu+XftewZ5g2Tclr7ClTo"'
            date: 'Mon, 24 Sep 2018 14:51:29 GMT'
            connection: close
          request:
            uri:
              protocol: 'http:'
              slashes: true
              auth: null
              host: 'localhost:23075'
              port: '23075'
              hostname: localhost
              hash: null
              search: '?query=000'
              query: query=000
              pathname: /enqueuer/idStuff
              path: '/enqueuer/idStuff?query=000'
              href: 'http://localhost:23075/enqueuer/idStuff?query=000'
            method: post
            headers:
              content-type: application/json
              authorization: 'Basic dXNlcjpwYXNzd29yZA=='
              Content-Length: 25
  -
    valid: true
    tests:
      -
        valid: true
        name: 'No time out'
        description: 'Requisition has not timed out'
    name: 'Requisition #1'
    time:
      totalTime: 47
      startTime: '2018-09-24T14:51:29.505Z'
      endTime: '2018-09-24T14:51:29.552Z'
      timeout: 5000
    subscriptions:
      -
        name: 'subscription description'
        type: http-server
        tests:
          -
            name: Payload
            valid: true
            description: '''JSON.parse(message.body).duplicated'' is not true. I swear'
          -
            valid: true
            name: 'Message received'
            description: 'Subscription has received its message'
        valid: true
        connectionTime: '2018-09-24T14:51:29.506Z'
        messageReceived:
          headers:
            content-type: application/json
            content-length: '24'
            host: 'localhost:23075'
            connection: close
          params:
            secondId: idStuff
          query:
            query: '111'
          body: "{\n  \"duplicated\": true\n}"
    startEvent:
      publisher:
        name: 'publisher description'
        valid: true
        type: http-client
        tests:
          -
            name: Published
            valid: true
            description: 'Published successfully'
          -
            name: 'Status Code'
            valid: true
            description: 'Expected ''statusCode'' to be equal to ''321''. Received ''321'''
          -
            name: Body
            valid: true
            description: 'Expected ''body'' to be equal to ''duplicatedResponsePayload''. Received ''duplicatedResponsePayload'''
          -
            name: 'Response message received'
            valid: true
            description: 'Response message was received'
        publishTime: '2018-09-24T14:51:29.552Z'
        messageReceived:
          statusCode: 321
          body: duplicatedResponsePayload
          headers:
            x-powered-by: Express
            content-type: 'text/html; charset=utf-8'
            content-length: '25'
            etag: 'W/"19-yZRAgggcER0sMyRTVBBpErTPT/A"'
            date: 'Mon, 24 Sep 2018 14:51:29 GMT'
            connection: close
          request:
            uri:
              protocol: 'http:'
              slashes: true
              auth: null
              host: 'localhost:23075'
              port: '23075'
              hostname: localhost
              hash: null
              search: '?query=111'
              query: query=111
              pathname: /enqueuer/idStuff
              path: '/enqueuer/idStuff?query=111'
              href: 'http://localhost:23075/enqueuer/idStuff?query=111'
            method: post
            headers:
              content-type: application/json
              Content-Length: 24
  -
    valid: true
    tests:
      -
        valid: true
        name: 'No time out'
        description: 'Requisition has not timed out'
    name: 'requisition 2 (port 23076)'
    time:
      totalTime: 1001
      startTime: '2018-09-24T14:51:29.574Z'
      endTime: '2018-09-24T14:51:30.575Z'
      timeout: 5000
    subscriptions: []
    startEvent:
      subscription:
        name: 'subscription description'
        type: http-server
        tests:
          -
            valid: true
            name: 'Subscription avoided'
            description: 'Avoidable subscription has not received any message'
        valid: true
        connectionTime: '2018-09-24T14:51:29.574Z'
  -
    valid: true
    tests:
      -
        valid: true
        name: 'No time out'
        description: 'Requisition has not timed out'
    name: 'check port releasing (23076)'
    time:
      totalTime: 1002
      startTime: '2018-09-24T14:51:30.578Z'
      endTime: '2018-09-24T14:51:31.580Z'
      timeout: 5000
    subscriptions: []
    startEvent:
      subscription:
        name: 'same port subscription'
        type: tcp-server
        tests:
          -
            valid: true
            name: 'Subscription avoided'
            description: 'Avoidable subscription has not received any message'
        valid: true
        connectionTime: '2018-09-24T14:51:30.578Z'
