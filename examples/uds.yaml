runnableVersion: 01.00.00
name: runnableUDSName
id: uds
runnables:
- timeout: 3000
  name: uds
  subscriptions:
  - type: uds
    path: "/tmp/unix.sock"
    name: udsSubscription
    response: responsePayload
    timeout: 500
    onMessageReceived: |-
      tester.isEqualTo('Message received is enqueuer 1', JSON.parse(message), 'enqueuer');
  startEvent:
    publisher:
      type: uds
      name: udsPublisher
      path: "/tmp/unix.sock"
      payload: "{{udsPayload}}"
      onMessageReceived: tester.isEqualTo('It is bidirectional', message.toString(), 'responsePayload');
      prePublishing: |-
        const payload = 'enqueuer';
        store.persistSessionVariable('udsPayload', payload);
        store.persistSessionVariable('uds2RequisitionName', 'RequisitionUds2Name');
        store.persistSessionVariable('uds2Timeout', '500');
-
  name: "{{uds2RequisitionName}}"
  startEvent:
    publisher:
      type: uds
      name: udsPublisher2
      path: "/tmp/unix2.sock"
      payload: "{{udsPayload}}"
      prePublishing: tester.isEqualTo('Message to be published is {{udsPayload}}', publisher.payload, '{{udsPayload}}');
  subscriptions:
  - type: uds
    path: "/tmp/unix2.sock"
    name: udsSubscription2
    onMessageReceived: tester.isEqualTo('Message received is {{udsPayload}} 2', JSON.parse(message), '{{udsPayload}}');
    timeout: "{{uds2Timeout}}"
