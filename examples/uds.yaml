runnableVersion: 01.00.00
name: runnableUDSName
id: uds
runnables:
- timeout: 3000
  name: uds
  startEvent:
    publisher:
      type: uds
      name: udsPublisher
      path: "/tmp/unix.sock"
      payload: I'll be replaced in 'onInit'
      onMessageReceived: tester.isEqualTo('It is bidirectional', message.toString(), 'responsePayload');
      onInit: |-
        const payload = 'enqueuer';
        store.udsPayload = payload;
        store.uds2RequisitionName = 'RequisitionUds2Name';
        store.uds2Timeout = '500';
        store.uds2Name = 'UDS2 Name';
        publisher.payload = store.udsPayload;
  subscriptions:
  - type: uds
    path: "/tmp/unix.sock"
    name: udsSubscription
    response: responsePayload
    timeout: 500
    onMessageReceived: |-
      tester.isEqualTo('Message received is enqueuer', JSON.parse(message), store.udsPayload);
-
  name: <<uds2Name>>
  startEvent:
    publisher:
      type: uds
      name: udsPublisher2
      path: "/tmp/unix2.sock"
      payload: "{{udsPayload}}"
      onInit: tester.isEqualTo('Message to be published is {{udsPayload}}', publisher.payload, store.udsPayload);
  subscriptions:
  - type: uds
    path: "/tmp/unix2.sock"
    name: udsSubscription2
    onMessageReceived: tester.isEqualTo('Message received is {{udsPayload}} 2', JSON.parse(message), store.udsPayload);
    timeout: "{{uds2Timeout}}"
