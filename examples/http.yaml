runnableVersion: 01.00.00
name: runnableHttpYmlPayload
id: http
initialDelay: 0
runnables:
- timeout: 3000
  name: HttpOriginal
  subscriptions:
  - type: http-server
    name: HttpSubscriptionTitle
    endpoint: /enqueuer/:someId
    port: 23075
    method: POST
    response:
      status: 321
      payload: responsePayload
    onMessageReceived: >-
      tester.isEqualTo('Params is someId', message.params.someId, 'idStuff');
      tester.isEqualTo('Query is 123', message.query.query, '123');
      tester.isEqualTo('Payload is Virgs', JSON.parse(message.body).enqueuer, 'virgs');
    timeout: 10000
  startEvent:
    publisher:
      type: http-client
      name: HttpPublisherClientTitle
      url: http://localhost:23075/enqueuer/idStuff?query=123
      method: POST
      prePublishing: tester.isTruthy('prePublishingTest', true);
      onMessageReceived: >-
        tester.isEqualTo('publisherOnMessageReceivedTest', JSON.parse(message).statusCode, 321);
        tester.isEqualTo('publisherOnMessageReceivedPayloadTest', JSON.parse(message).body, 'responsePayload');
      payload:
        enqueuer: virgs
      headers:
        content-type: application/json
- timeout: 3000
  name: HttpTitleDuplicated
  subscriptions:
  - type: http-server
    name: DuplicatedEndPointTest
    endpoint: /enqueuer/:someId
    port: 23075
    method: POST
    response:
      status: 321
      payload: responsePayload
    onMessageReceived: >-
      tester.isTruthy('Duplicated', JSON.parse(message.body).duplicated);
    timeout: 10000
  startEvent:
    publisher:
      type: http-client
      name: HttpPublisherClientTitle
      url: http://localhost:23075/enqueuer/234234234?query=123
      method: POST
      prePublishing: tester.isTruthy('prePublishingTest', true);
      onMessageReceived: >-
        tester.isEqualTo('publisherOnMessageReceivedTest', JSON.parse(message).statusCode, 321);
        tester.isEqualTo('publisherOnMessageReceivedPayloadTest', JSON.parse(message).body, 'responsePayload');
      payload:
        duplicated: true
