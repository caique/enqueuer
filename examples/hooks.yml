name: hooks test description
id: hook
runnables:
- name: requisition description
  timeout: 1000
  onInit:
    script: |-
      store.sequence = 'requisition::onInit';
    assertions:
    - name: Requisitions exists onInit
      toBeDefined: requisition
  startEvent:
    publisher:
      name: publisher description
      type: tcp-client
      timeout: 1000
      serverAddress: localhost
      port: 23080
      payload: it
      onInit:
        script: |-
          publisher.name = 'changed';
          store.sequence += ' -> publisher::onInit';
        assertions:
        - name: Publisher exists onInit
          toBeDefined: publisher
        - name: Publisher name
          expected: publisher.name
          toBeDefined: publisher
      onMessageReceived:
        script: store.sequence += ' -> publisher::onMessageReceived';
        assertions:
        - name: Publisher exists onMessageReceived
          toBeDefined: publisher
        - name: Publisher name changed
          expected: publisher.name
          toBeEqualTo: `changed`
        - name: Publisher onInit executed
          expected: store.sequence
          toContain: `publisher::onInit`
  subscriptions:
  - name: subscription description
    type: tcp-server
    port: 23080
    response: hook response
    onInit:
      script: |-
        subscription.name = 'changed';
        store.sequence += ' -> subscription::onInit';
      assertions:
      - name: Subscription exists onInit
        toBeDefined: subscription
      - name: Subscription name
        expected: subscription.name
        toBeEqualTo: `changed`
    onMessageReceived:
      script: store.sequence += ' -> subscription::onMessageReceived';
      assertions:
      - name: Subscription exists onMessageReceived
        toBeDefined: subscription
      - name: Subscription name changed
        expected: subscription.name
        toBeEqualTo: `changed`
      - name: Subscription onInit executed
        expected: store.sequence
        toContain: `subscription::onInit`