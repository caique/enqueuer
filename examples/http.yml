name: runnableHttpYmlPayload
id: http
runnables:
- timeout: 3000
  name: Original
  startEvent:
    publisher:
      type: http-client
      name: Original Publisher
      url: http://localhost:23075/enqueuer/idStuff?query=123
      method: POST
      onInit: tester.isTruthy('onInit', true);
      onMessageReceived: |-
        tester.isEqualTo('publisherOnMessageReceivedTest', message.statusCode, 321);
        tester.isEqualTo('publisherOnMessageReceivedPayloadTest', message.body, 'responsePayload');
      payload:
        enqueuer: virgs
      headers:
        content-type: application/json
  subscriptions:
  - type: http-server
    name: Original Subscription
    endpoint: /enqueuer/:someId
    port: 23075
    method: POST
    response:
      status: 321
      payload: responsePayload
    onMessageReceived: |-
      tester.isEqualTo('Params is someId', message.params.someId, 'idStuff');
      tester.isEqualTo('Query is 123', message.query.query, '123');
      tester.isEqualTo('Payload is Virgs', JSON.parse(message.body).enqueuer, 'virgs');
    timeout: 10000
- timeout: 5000
  name: Duplicated
  startEvent:
    publisher:
      type: http-client
      name: Duplicated Publisher
      url: http://localhost:23075/enqueuer/234234234?query=123
      method: POST
      onInit: tester.isTruthy('onInitTest', true);
      onMessageReceived: |-
        tester.isEqualTo('publisherOnMessageReceivedTest', message.statusCode, 321)
        tester.isEqualTo('publisherOnMessageReceivedPayloadTest', message.body, 'duplicatedResponsePayload');
      payload:
        duplicated: true
  subscriptions:
  - type: http-server
    name: Duplicated Subscription
    endpoint: /enqueuer/:someId
    port: 23075
    method: POST
    response:
      status: 321
      payload: duplicatedResponsePayload
    onMessageReceived: |-
      tester.isTruthy('Duplicated', JSON.parse(message.body).duplicated);
    timeout: 3000
- name: GET method test
  timeout: 3000
  startEvent:
    publisher:
      type: http-client
      name: Publisher
      url: http://localhost:23075/gui
      method: GET
      onInit: tester.isTruthy('onInitTest', true);
      onMessageReceived: tester.isEqualTo('It runs get onMessageReceived', message.statusCode, 200);
      headers:
        content-type: application/json
  subscriptions:
    - type: http-server
      name: Subscription
      endpoint: /gui
      port: 23075
      method: GET
      response:
        status: 200
        payload: responsePayload
      onMessageReceived: |-
        tester.isDefined('isDefined', message);
- name: Basic Authentication
  timeout: 3000
  startEvent:
    publisher:
      type: http-client
      name: Publisher
      url: http://localhost:23075/basicAuth
      method: GET
      onInit: tester.isTruthy('onInitTest', true);
      onMessageReceived: tester.isEqualTo('It runs get onMessageReceived', message.statusCode, 200);
      authentication:
        basic:
          user: user
          password: password
      headers:
        content-type: application/json
  subscriptions:
    - type: http-server
      name: subscription
      endpoint: /basicAuth
      port: 23075
      method: GET
      response:
        status: 200
        payload: responsePayload
      authentication:
        basic:
          user: user
          password: password
- name: Hit online webpage
  timeout: 5000
  subscriptions: []
  startEvent:
   publisher:
     type: http-client
     name: HttpEnqueuerRepository
     url: https://github.com/lopidio/enqueuer
     method: GET
     onInit: tester.isTruthy('onInitTest', true);
     onMessageReceived: tester.isEqualTo('It is online', message.statusCode, 200);
     headers:
       content-type: application/json
- timeout: 3000
  name: Https
  startEvent:
    publisher:
      type: https-client
      name: HttpsClient
      url: https://localhost:4430/enqueuer/idHttps?query=999
      method: I'll be reaplaced. Not because I have to. It's just an example
      onInit: >-
        publisher.method = 'POST';
      onMessageReceived: >-
        tester.isEqualTo('Status code', message.statusCode, 200);
        tester.isEqualTo('Replaced payload', message.body, 'idHttps');
      payload:
        https: works!
      headers:
        content-type: application/json
  subscriptions:
  - type: https-server
    name: HttpsServer
    endpoint: /enqueuer/:someId
    port: 4430
    method: POST
    response:
      status: 200
      payload: anyValue
    onMessageReceived: >-
      tester.isEqualTo('Params is someId', message.params.someId, 'idHttps');
      tester.isEqualTo('Query is 999', message.query.query, '999');
      tester.isEqualTo('Payload Https', JSON.parse(message.body).https, 'works!');
      subscription.response.payload = message.params.someId;
    timeout: 1000
    credentials: <<httpsCredentials>>
