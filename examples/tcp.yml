name: runnableTcpName
id: tcp
runnables:
-
  timeout: 3000
  name: tcpNoPart
  startEvent:
    publisher:
      type: tcp-client
      name: Any name Pub
      serverAddress: localhost
      port: 23070
      payload: Hey Jude
      onMessageReceived: tester.isEqualTo('Do not make it bad', message.toString(), 'Do not make it bad');
      timeout: 100
  subscriptions:
  - type: tcp-server
    port: 23070
    name: Any name Sub
    response: Do not make it bad
    onMessageReceived: tester.isEqualTo('Beatles Song', message.toString(), 'Hey Jude');
    timeout: 200
-
  timeout: 3000
  name: tcpFirstPart
  startEvent:
    publisher:
      type: tcp-client
      name: tcpPublisher1
      serverAddress: localhost
      port: 23070
      payload: I do not care
      saveStream: tcpPublisherSocket
      onMessageReceived: tester.isEqualTo('Greeting received', message.toString(), 'EnqueuerRocks');
      timeout: 100
  subscriptions:
  - type: tcp-server
    port: 23070
    name: tcpSubscription1
    saveStream: tcpSubscriptionSocket
    greetingResponse: Enqueuer
    response: Rocks
    onMessageReceived: tester.isEqualTo('I care', message.toString(), 'I do not care');
    timeout: 200
-
  name: tcpSecondPart
  timeout: 3000
  startEvent:
    publisher:
      type: tcp-client
      name: tcpPublisher2
      payload: The socket is still open
      loadStream: tcpPublisherSocket
      onMessageReceived: tester.isEqualTo(`Second message is '<<tcpPayload>>'`, message.toString(), '<<tcpPayload>>');
  subscriptions:
  - type: tcp-server
    name: tcpSubscription2
    loadStream: tcpSubscriptionSocket
    response: <<tcpPayload>>
    onMessageReceived: tester.isEqualTo('It is still open', message.toString(), 'The socket is still open');
    timeout: 1000