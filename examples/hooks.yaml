sion: 01.00.00
name: hooks example
id: hook
runnables:
- timeout: 100
  onInit: >-
    tester.isDefined('Requisition exists', requisition);
    tester.isEqualTo('Requisition name', requisition.name, 'example');
    store.sequence = 'requisition::onInit';
  name: example
  startEvent:
    publisher:
      type: http-client
      name: publishing
      url: http://localhost:23078/hooks
      method: GET
      onInit: >-
        tester.isDefined('Publisher exists onInit', publisher);
        tester.isEqualTo('Publisher name', publisher.name, 'publishing');
        publisher.name = 'changed';
        store.sequence += ' -> publisher::onInit';
      onMessageReceived: >-
        tester.isDefined('Publisher exists onMessageReceived', publisher);
        tester.isEqualTo('Publisher name changed', publisher.name, 'changed');
        tester.contains('Publisher onInit executed', store.sequence, 'publisher::onInit');
        store.sequence += ' -> publisher::onMessageReceived';
  subscriptions:
    - type: http-server
      name: subscription
      endpoint: /hooks
      port: 23078
      method: GET
      response:
        status: 200
      onInit: >-
        tester.isDefined('Subscription exists onInit', subscription);
        tester.isEqualTo('Subscription name', subscription.name, 'subscription');
        subscription.name = 'changed';
        store.sequence += ' -> subscription::onInit';
      onMessageReceived: >-
        tester.isDefined('Subscription exists onMessageReceived', subscription);
        tester.isEqualTo('Subscription name changed', subscription.name, 'changed');
        tester.contains('Subscription onInit executed', store.sequence, 'subscription::onInit');
        store.sequence += ' -> subscription::onMessageReceived';
